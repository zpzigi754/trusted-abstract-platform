module common_types {

//
// address types
//
type vaddr_t = bv32;

// These might belong in the keystone modules
type paddr_t = bv24;
type voffset_t = bv12;
//


type wap_addr_t = bv22;
type word_t  = bv32;
type linear_addr_t = bv24;


// -------------------------------------------------------------------- //
// constants and functions for vaddr_t                                  //
// -------------------------------------------------------------------- //
const kmax_vaddr_t : vaddr_t = 4294967295bv32;
const kmax_vaddr_t_as_int : integer = 4294967295;
const k0_vaddr_t : vaddr_t = 0bv32;
const k1_vaddr_t : vaddr_t = 1bv32;
define LT_va(p1, p2 : vaddr_t) : boolean = p1 <_u p2;
define LTE_va(p1, p2 : vaddr_t) : boolean = p1 <=_u p2;
define PLUS_va(p1, p2 : vaddr_t) : vaddr_t = p1 + p2;



// -------------------------------------------------------------------- //
// constants and functions for wap_addr_t                               //
// -------------------------------------------------------------------- //
const kmax_wap_addr_t : wap_addr_t = 4194303bv22;
const kmax_wap_addr_t_as_int : integer = 4194303;
const k0_wap_addr_t : wap_addr_t = 0bv22;
const k1_wap_addr_t : wap_addr_t = 1bv22;
const k2_wap_addr_t : wap_addr_t = 2bv22;
define LT_wapa(p1, p2 : wap_addr_t) : boolean = p1 <_u p2;
define LTE_wapa(p1, p2 : wap_addr_t) : boolean = p1 <=_u p2;
define PLUS_wapa(p1, p2 : wap_addr_t) : wap_addr_t = p1 + p2;


// -------------------------------------------------------------------- //
// memory.                                                              //
// -------------------------------------------------------------------- //
type mem_t = [wap_addr_t]word_t;


// -------------------------------------------------------------------- //
// constants and functions for word_t                                   //
// -------------------------------------------------------------------- //
const k0_word_t : word_t = 0bv32;
const kmax_word_t : word_t = 4294967295bv32;
const kmax_word_t_as_int : integer = 4294967295;


// -------------------------------------------------------------------- //
// uarch state                                                          //
// -------------------------------------------------------------------- //
type cache_set_index_t = integer;
type cache_way_index_t = integer;
type cache_tag_t       = integer; 

const kmax_cache_set_index_t : cache_set_index_t;
const kmax_cache_way_index_t : cache_way_index_t;
axiom kmax_cache_set_index_t > 0;
axiom kmax_cache_way_index_t > 0;

define valid_cache_way_index(w: cache_way_index_t) : boolean = (
  w >=0 && w < kmax_cache_way_index_t
);
define valid_cache_set_index(s: cache_set_index_t) : boolean = (
  s >= 0 && s < kmax_cache_set_index_t
);


type cache_valid_map_t = [cache_set_index_t, cache_way_index_t]boolean;
type cache_tag_map_t   = [cache_set_index_t, cache_way_index_t]cache_tag_t;

function paddr2set(pa : wap_addr_t) : cache_set_index_t;
function paddr2tag(pa : wap_addr_t) : cache_tag_t;


// -------------------------------------------------------------------- //
// Measurement                                                          //
// -------------------------------------------------------------------- //
type measurement_t = integer;
const k0_measurement_t : measurement_t = 0;


//--------------------------------------------------------------------------//
// utility fns                                                              //
//--------------------------------------------------------------------------//
function word2int(w : word_t) : integer;
axiom (forall (w1, w2 : word_t) :: (w1 != w2) ==> (word2int(w1) != word2int(w2)));
axiom (forall (w : word_t) :: word2int(w) >= 0 && word2int(w) <= kmax_word_t_as_int);

function vaddr2int(va : vaddr_t) : integer;
axiom (forall (v1, v2 : vaddr_t) :: (v1 != v2) ==> (vaddr2int(v1) != vaddr2int(v2)));
axiom (forall (w : vaddr_t) :: vaddr2int(w) >= 0 && vaddr2int(w) <= kmax_vaddr_t_as_int);

}

